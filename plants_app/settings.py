"""
Django settings for plants_app project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import environ

import dj_database_url
import django_heroku
import cloudinary
import cloudinary_storage

from pathlib import Path

from django.contrib import messages, staticfiles
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fg8mh0vqvm4ng_wn%z12d3)%em(s1-lcd^^ap^179itn=d2*al'
# SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # development
# DEBUG = False  # production

ADMINS = (
    ('admin', 'bartkram11@gmail.com'),
)

MANAGERS = ADMINS

ALLOWED_HOSTS = ["*"]  # don't use it for production
# ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.herokuapp.com', '.ngrok.io']

CSRF_TRUSTED_ORIGINS = ['https://*.ngrok.io', 'https://*.127.0.0.1', 'https://*.herokuapp.com']

# Application definition
INSTALLED_APPS = [
    'jazzmin',
    'dal',
    'dal_select2',
    'whitenoise.runserver_nostatic',  # above the built-in staticfiles
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_extensions',
    'django_filters',
    'import_export',
    'crispy_forms',
    'ckeditor',
    'sorl.thumbnail',
    'rest_framework',
    'guardian',
    'translation_manager',
    'rosetta',
    'webpush',
    'cloudinary',
    'cloudinary_storage',
    'django_celery_results',
    'django_celery_beat',
    'captcha',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'main.apps.MainConfig',
    'authentication.apps.AuthenticationConfig',
    'control_panel.apps.ControlPanelConfig',
    'blog.apps.BlogConfig',
    'galleries.apps.GalleriesConfig',
]

# LocaleMiddleware: # this middleware should come after the SessionMiddleware because it needs to use the session data.
# It should also be placed before the CommonMiddleware because the CommonMiddleware needs the active language to resolve
# the URLs being requested.

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # add whitenoise exactly here
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # add exactly here
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'plants_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'plants_app.wsgi.application'

# Postgres database:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'plants_app_db',
        'USER': 'monika_plants_app',
        'PASSWORD': 'xyz123^dd2ded',
        'HOST': 'localhost',
        'PORT': 5432,
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': env("DATABASE_NAME"),
#         'USER': env("DATABASE_USER"),
#         'PASSWORD': env("DATABASE_PASSWORD"),
#         'HOST': env("DATABASE_HOST"),
#         'PORT': env("DATABASE_PORT"),
#     }
# }

prod_db = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(prod_db)

# Database for Docker:

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': os.environ.get('POSTGRES_NAME'),
#         'USER': os.environ.get('POSTGRES_USER'),
#         'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
#         'HOST': 'db',
#         'PORT': 5432,
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": "BDcxyHK3YDNBSfLD3znx72PZCh31p18y6no06f4dbsOfysh4vMIbP-4FrXtVo_c6ZcOOH2KZqi7_2DSmDRNoDJ8",
    "VAPID_PRIVATE_KEY": "EKO42Y5YlevKQVEpNNDIfl6HCDNEaCf-fdGQbHSIsIk",
    "VAPID_ADMIN_EMAIL": "bartkram11@gmail.com"
}

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Warsaw'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = (
    ('en', _('English')),
    ('pl', _('Polish')),
    ('es', _('Spanish')),
)

LOCALE_PATHS = [BASE_DIR / 'locale', ]

LANGUAGE_COOKIE_NAME = 'django_language'

LANGUAGE_SESSION_KEY = '_language'

# TRANSLATIONS_BASE_DIR = BASE_DIR

TRANSLATIONS_IGNORED_PATHS = ['env', ]

TRANSLATIONS_MAKE_BACKUPS = True

TRANSLATIONS_CLEAN_PO_AFTER_BACKUP = False

TRANSLATIONS_ADMIN_EXCLUDE_FIELDS = ['get_hint', 'locale_parent_dir', 'domain']

TRANSLATIONS_HINT_LANGUAGE = 'en'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'  # the URL location of static files located in STATIC_ROOT
MEDIA_URL = '/media/'

if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'main/static'), ]  # tells Django where to look for static files in a Django project

else:
    STATIC_ROOT = os.path.join(BASE_DIR,
                               'main/static')  # the absolute path to the directory where collectstatic will collect static files for deployment

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# To reduce the size of the static files when they are served (more efficient)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

TEMPLATE_LOADERS = 'django.template.loaders.filesystem.Loader'

# To serve files directly from their original locations
WHITENOISE_USE_FINDERS = True

# Cloudinary to serve media files
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': 'hwsaxtipv',
    'API_KEY': '862665951215524',
    'API_SECRET': 'DG3rhdnRiyOW1_LhsscuadKCsRY',
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

SHELL_PLUS_PRINT_SQL = True

CRISPY_TEMPLATE_PACK = "bootstrap4"

SITE_ID = 2  # 1 will be if we've changed the example.com to the local address

LOGIN_URL = '/authentication'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

NEWSLETTER_THUMBNAIL = 'sorl-thumbnail'
NEWSLETTER_ROOT = BASE_DIR / 'main/templates'

# Gmail Sending Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

DEFAULT_FROM_EMAIL = 'bartkram11@gmail.com'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'bartkram11@gmail.com'
EMAIL_HOST_PASSWORD = 'xjabjiktcydxhotr'
EMAIL_PORT = 587  # this is gmail's port
EMAIL_USE_TLS = True  # this encrypts our emails being sent

# Celery Configuration
CELERY_BROKER_URL = 'redis://:p40891d05143cda309f34808c719ff2beb87113706a0e4db52949b86ae98275b1@ec2-44-198-147-115.compute-1.amazonaws.com:30580'  # or 'redis://localhost:6379'

CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['application/json']  # or ['json']

CELERY_TIMEZONE = 'Europe/Warsaw'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

# Stores tasks status in django database
CELERY_RESULT_BACKEND = 'redis://:p40891d05143cda309f34808c719ff2beb87113706a0e4db52949b86ae98275b1@ec2-44-198-147-115.compute-1.amazonaws.com:30580'  # or 'django-db'

# Celery Beat settings
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

# Django messages
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# reCAPTCHA
RECAPTCHA_PUBLIC_KEY = '6LdsRlwiAAAAAAbfW28eMholsdnvkdQugh552FuV'
RECAPTCHA_PRIVATE_KEY = '6LdsRlwiAAAAAD2eBGWZyAwkCElSovecU1A-tqDT'

# Google OAuth
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# Additional configuration settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True

SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_LOGOUT_ON_GET = True

# To activate django-heroku
django_heroku.settings(locals())
